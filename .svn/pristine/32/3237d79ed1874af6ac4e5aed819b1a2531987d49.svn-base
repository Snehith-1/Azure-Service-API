import { Component } from '@angular/core';
import { FormBuilder, FormGroup,} from '@angular/forms';
import { SocketService } from 'src/app/ems.utilities/services/socket.service';
import { ToastrService } from 'ngx-toastr';
import { ActivatedRoute, Router } from '@angular/router';
import { AES } from 'crypto-js';

@Component({
  selector: 'app-smr-trn-salesorder-summary',
  templateUrl: './smr-trn-salesorder-summary.component.html',
  styleUrls: ['./smr-trn-salesorder-summary.component.scss']
})
export class SmrTrnSalesorderSummaryComponent {
  reactiveForm!: FormGroup;
  responsedata: any;
  salesorder_list: any[] = [];
  salesproduct_list: any[] = [];
  getData: any;
  parameterValue1: any;
  salesorder_gid: any;
  constructor(private formBuilder: FormBuilder,public route:ActivatedRoute,public service :SocketService,private router:Router,private ToastrService: ToastrService) {
  }
    
  
  ngOnInit(): void {
    debugger
    this.GetSmrTrnSalesordersummary();
}
//// Summary Grid//////
GetSmrTrnSalesordersummary( )

 {
  debugger
  var url = 'SmrTrnSalesorder/GetSmrTrnSalesordersummary'
  this.service.get(url).subscribe((result: any) => {
    $('#salesorder_list').DataTable().destroy();
    this.responsedata = result;
    this.salesorder_list = this.responsedata.salesorder_list;
    setTimeout(() => {
      $('#salesorder_list').DataTable();
    }, 1);


  })
  
  
}
onview(params:any){
  const secretKey = 'storyboarderp';
  const param = (params);
  const lspage1 = "SmrTrnSalesorderview";
  const leadbank_gid1 = "";
  const leadbank_gid = AES.encrypt(leadbank_gid1, secretKey).toString();
  const lspage = AES.encrypt(lspage1, secretKey).toString();
  const encryptedParam = AES.encrypt(param,secretKey).toString();
  this.router.navigate(['/smr/SmrTrnSalesorderview',encryptedParam,leadbank_gid,lspage]);
}
onamend(params:any){
  const secretKey = 'storyboarderp';
  const param = (params);
  const encryptedParam = AES.encrypt(param,secretKey).toString();
  this.router.navigate(['/smr/SmrTrnSalesorderamend',encryptedParam])
}

add(){
  this.router.navigate(['/smr/SmrTrnRaiseSalesOrder'])
} 
  openModaledit(){}
  openModaldelete(){}
  onattach(){}
  openModalshop(){}

  openModalcancel(parameter: string){
    this.parameterValue1 = parameter
  }

  oncancel(){
    debugger;
    console.log(this.parameterValue1);
    var url3 = 'SmrTrnSalesorder/getCancelSalesOrder'
    this.service.getid(url3, this.parameterValue1).subscribe((result: any) => {
      if (result.status == false) {
        this.ToastrService.warning('Error While Cancelling Order')
        this.GetSmrTrnSalesordersummary();
  
      }
      else {
        this.ToastrService.success('Order Cancelled Successfully')
        this.GetSmrTrnSalesordersummary();
        window.location.reload();
      }
  
    });
  }


  Details(parameter: string,salesorder_gid: string){
  this.parameterValue1 = parameter;
  this.salesorder_gid = parameter;

  var url='SmrTrnSalesorder/GetSalesProductdetails'
    let param = {
      salesorder_gid : salesorder_gid 
    }
    this.service.getparams(url,param).subscribe((result:any)=>{
    this.responsedata=result;
    this.salesproduct_list = result.salesproduct_list;   
    });
    
  
}
}

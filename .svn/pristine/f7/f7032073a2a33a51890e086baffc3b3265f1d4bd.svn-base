using ems.utilities.Functions;
using System;
using System.Collections.Generic;
using System.Data.Odbc;
using System.Data;
using System.Linq;
using System.Web;
using ems.pmr.Models;




namespace ems.pmr.DataAccess
{
    public class DaPmrTrnPurchaseQuotaion
    {


        dbconn objdbconn = new dbconn();
        cmnfunctions objcmnfunctions = new cmnfunctions();
        HttpPostedFile httpPostedFile;
        string msSQL = string.Empty;
        string lspop_server, lspop_mail, lspop_password, lscompany, lscompany_code;
        string msINGetGID, msGet_att_Gid, msenquiryloggid;
        string lspath, lspath1, lspath2, mail_path, mail_filepath, pdf_name = "";
        OdbcDataReader objODBCDatareader, objODBCDatareader1;
        OdbcDataReader ds_tsalesorderadd;
        DataTable mail_datatable, dt_datatable;

        string msEmployeeGID, lsemployee_gid, lsentity_code, lsquotationgid, msGetSalesOrderGID, mssalesorderGID1, msGetTempGID, lsquotation_type, lsdesignation_code, lstaxname2, lstaxname3, lsamount2, lsamount3, lspercentage2, lspercentage3, lscustomer_code, pricingsheet_refno, roundoff, mssalesorderGID, lsCode, msGetGid, msGetGid1, msgetGid2, msgetGid4, lstype1, lshierarchy_flag, msGetPrivilege_gid, msGetModule2employee_gid;
        int mnResult, mnResult1, mnResult2, mnResult3, mnResult4, mnResult5, lspop_port;
        string msGetCustomergid, msconGetGID;
        string lscustomer_name;
        string lscontact_person, lsvendor_companyname, lscustomercontact_gid, lscustomerbranch_name, lsproductcode, lscustomercontact_names;
        string lstmpquotationgid;
        string lsproductgroup_gid;
        string lsproductgroup;
        string lsproductname_gid;
        string lsproductname;
        string lsuom_gid;
        string lsvendor_gid;
        string lsuom;
        string lsunitprice;
        string lsquantity;
        string lsdiscountpercentage;
        string lsdiscountamount;
        string lstax_name1;
        string lscustomerproduct_code;
        string lstax_name2;
        string lstax_name3;
        string lstaxamount_1;
        string lstaxamount_2;
        string lstaxamount_3;
        string lstotalamount;
        string lssono, lsprice;
        string lsdisplay_field, lslocalmarginpercentage, lslocalsellingprice, lsuom_name, lsreqdate_remarks, lsrequired_date;
        public void DaGetPmrTrnPurchaseQuotation(MdlPmrTrnPurchaseQuotation values)
        {


            msSQL = "SELECT a.quotation_gid, a.quotation_referenceno1, a.branch_gid, b.vendor_companyname, a.quotation_date,b.vendor_companyname,b.vendor_gid, " +
            "CONCAT(a.contactperson_name, '/ ', a.vendor_address, '/ ', a.email_id, '/ ', a.contact_telephonenumber) AS contact, " +
            "a.created_by, a.quotation_status, a.total_amount, a.grandtotal_l, a.qo_type " +
            "FROM pmr_trn_tquotation a " +
            "LEFT JOIN acp_mst_tvendor b ON b.vendor_gid = a.vendor_gid " +
            "WHERE 1 = 1 GROUP BY a.quotation_gid ORDER BY a.quotation_gid asc ";



            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getModuleList = new List<quotation_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getModuleList.Add(new quotation_list
                    {

                        quotation_gid = dt["quotation_gid"].ToString(),
                        quotation_date = dt["quotation_date"].ToString(),
                        quotation_referenceno1 = dt["quotation_referenceno1"].ToString(),
                        vendor_companyname = dt["vendor_companyname"].ToString(),
                        contact = dt["contact"].ToString(),
                        qo_type = dt["qo_type"].ToString(),
                        created_by = dt["created_by"].ToString(),
                        grandtotal_l = dt["grandtotal_l"].ToString(),
                        quotation_status = dt["quotation_status"].ToString(),

                    });
                    values.quotation_list = getModuleList;
                }
            }
            dt_datatable.Dispose();


        }

        public void DaGetVendor(MdlPmrTrnPurchaseQuotation values)
        {
            msSQL = " Select vendor_gid, vendor_companyname " +
                 " from acp_mst_tvendor " +
                 " order by vendor_gid desc ";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getModuleList = new List<Vendor_list1>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getModuleList.Add(new Vendor_list1
                    {
                        vendor_companyname = dt["vendor_companyname"].ToString(),
                        vendor_gid = dt["vendor_gid"].ToString(),
                    });
                    values.Vendor_list = getModuleList;
                }
            }
            dt_datatable.Dispose();
        }

        public void DaGetOnChangeVendor(string vendor_gid, MdlPmrTrnPurchaseQuotation values)
        {



            msSQL = "  select a.vendor_gid,a.contactperson_name,a.contact_telephonenumber,a.email_id,b.country_gid,b.address1,b.address2,c.country_name,b.city,b.state, b.postal_code,b.branch_name " +
             " from acp_mst_tvendor a " +
              " left join adm_mst_taddress b on a.address_gid=b.address_gid " +
             " left join adm_mst_tcountry c on c.country_gid=b.country_gid " +
             " where a.vendor_gid='" + vendor_gid + "' ";


            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getModuleList = new List<GetVendordtl>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getModuleList.Add(new GetVendordtl
                    {

                        vendor_gid = dt["vendor_gid"].ToString(),

                        address1 = dt["address1"].ToString(),
                        address2 = dt["address2"].ToString(),
                        contactperson_name = dt["contactperson_name"].ToString(),
                        contact_telephonenumber = dt["contact_telephonenumber"].ToString(),
                        email_id = dt["email_id"].ToString(),



                    });
                    values.GetVendordtl = getModuleList;
                }
            }
        }
        public void DaGetCurrencyDtl(MdlPmrTrnPurchaseQuotation values)
        {


            msSQL = "select currencyexchange_gid,currency_code from crm_trn_tcurrencyexchange order by currency_code asc";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getModuleList = new List<GetCurrencyCodeDropdown>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getModuleList.Add(new GetCurrencyCodeDropdown

                    {
                        currencyexchange_gid = dt["currencyexchange_gid"].ToString(),
                        currency_code = dt["currency_code"].ToString(),

                    });
                    values.GetCurrencyCodeDropdown = getModuleList;
                }
            }
            dt_datatable.Dispose();
        }

        public void DaGetOnchangeCurrency(string currencyexchange_gid, MdlPmrTrnPurchaseQuotation values)
        {
            msSQL = " select currencyexchange_gid,currency_code,exchange_rate from crm_trn_tcurrencyexchange " +
                " where currencyexchange_gid='" + currencyexchange_gid + "'";

            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getModuleList = new List<GetOnchangecurrency>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    getModuleList.Add(new GetOnchangecurrency
                    {

                        exchange_rate = dt["exchange_rate"].ToString(),
                        currency_code = dt["currency_code"].ToString(),
                    });
                    values.GetOnchangecurrency = getModuleList;
                }
            }
            dt_datatable.Dispose();
        }


        public void DaPostAddProduct(string employee_gid, summaryprod_list values)

        {

            msGetGid = objcmnfunctions.GetMasterGID("PQDC");
            msSQL = "select product_gid from pmr_mst_tproduct where product_name='" + values.product_name + "'";
            string lsproductgid = objdbconn.GetExecuteScalar(msSQL);

            msSQL = "select productuom_gid from pmr_mst_tproductuom where productuom_name='" + values.productuom_name + "'";
            string lsproductuomgid = objdbconn.GetExecuteScalar(msSQL);

            msSQL = "Select productgroup_gid from pmr_mst_tproductgroup where productgroup_name='" + values.productgroup_name + "'";
            string lsproductgroupgid = objdbconn.GetExecuteScalar(msSQL);

            msSQL = "select tax_name from acp_mst_ttax where tax_gid='" + values.tax_name + "'";
            string lstaxname = objdbconn.GetExecuteScalar(msSQL);

            if (values.tax_name2 == null || values.tax_name2 == "")
            {
                lstaxname2 = "0.00";
            }
            else
            {
                msSQL = "select tax_name from acp_mst_ttax where tax_gid='" + values.tax_name2 + "'";
                lstaxname2 = objdbconn.GetExecuteScalar(msSQL);
            }
            if (values.tax_name3 == null || values.tax_name3 == "")
            {
                lstaxname3 = "0.00";
            }
            else
            {
                msSQL = "select tax_name from acp_mst_ttax where tax_gid='" + values.tax_name3 + "'";
                lstaxname3 = objdbconn.GetExecuteScalar(msSQL);
            }
            msSQL = "select percentage from acp_mst_ttax where tax_gid='" + values.tax_name + "'";
            string lspercentage1 = objdbconn.GetExecuteScalar(msSQL);
            if (values.tax_name2 == null || values.tax_name2 == "")
            {
                lspercentage2 = "0.00";
            }
            else
            {
                msSQL = "select percentage from acp_mst_ttax where tax_gid='" + values.tax_name2 + "'";
                lspercentage2 = objdbconn.GetExecuteScalar(msSQL);
            }
            if (values.tax_name3 == null || values.tax_name3 == "")
            {
                lspercentage3 = "0.00";
            }
            else
            {

                msSQL = "select percentage from acp_mst_ttax where tax_gid='" + values.tax_name3 + "'";
                lspercentage3 = objdbconn.GetExecuteScalar(msSQL);

            }

            if (values.tax_amount2 == null || values.tax_amount2 == "")
            {
                lsamount2 = "0.00";
            }
            else
            {
                lsamount2 = "'" + values.tax_amount2 + "',";
            }

            if (values.tax_amount3 == null || values.tax_amount3 == "")
            {
                lsamount3 = "0.00";
            }
            else
            {
                lsamount3 = "'" + values.tax_amount3 + "',";
            }
            int i = 0;

            msSQL = " SELECT a.producttype_name FROM pmr_mst_tproducttype a " +
              " INNER JOIN pmr_mst_tproduct b ON a.producttype_gid=b.producttype_gid  " +
              " WHERE product_gid='" + lsproductgid + "'";
            objODBCDatareader = objdbconn.GetDataReader(msSQL);
            if (objODBCDatareader.HasRows == true)
            {
                if (objODBCDatareader["producttype_name"].ToString() != "Services")
                {
                    lsquotation_type = "Sales";
                }
                else
                {
                    lsquotation_type = "Services";
                }

            }

            msSQL = " insert into pmr_tmp_tquotationdtl( " +
               " quotationdtl_gid," +
               " quotation_gid," +
               " employee_gid," +
               " product_gid," +
               " productgroup_gid," +
               " productgroup_name," +
               " customerproduct_code," +
               " product_name," +
               " display_field," +
               " product_price," +
               " qty_quoted," +
               " uom_gid," +
               " uom_name," +
               " price," +
               " tax_name," +
               " tax_name2," +
               " tax_name3," +
               " tax_amount," +
               " tax_amount2," +
               " tax_amount3," +
               " tax_percentage,tax_percentage2,tax_percentage3, " +
               " tax1_gid,tax2_gid,tax3_gid, " +
               " discount_percentage," +
               " discount_amount," +
               " selling_price," +
               " vendor_gid," +
               " product_requireddate , " +
               " productrequireddate_remarks, " +
               " product_code " +
               ")values(" +
               "'" + msGetGid + "'," +
               "'" + values.quotation_gid + "'," +
               "'" + employee_gid + "'," +
               "'" + lsproductgid + "'," +
               "'" + lsproductgroupgid + "'," +
               "'" + values.productgroup_name + "'," +
               "'" + values.customerproduct_code + "'," +
               "'" + values.product_name + "'," +
               "'" + values.display_field + "'," +
               "'" + values.selling_price + "'," +
               "'" + values.qty_quoted + "'," +
               "'" + lsproductuomgid + "'," +
               "'" + values.productuom_name + "'," +
               "'" + values.totalamount + "'," +
               "'" + lstaxname + "'," +
               "'" + lstaxname2 + "'," +
               "'" + lstaxname3 + "'," +
               "'" + values.tax_amount + "',";
            if (values.tax_amount2 == "" || values.tax_amount2 == null)
            {
                msSQL += "'0.00',";
            }
            else
            {
                msSQL += "'" + values.tax_amount2 + "',";
            }
            if (values.tax_amount3 == "" || values.tax_amount3 == null)
            {
                msSQL += "'0.00',";
            }
            else
            {
                msSQL += "'" + values.tax_amount3 + "',";
            }
            msSQL += "'" + lspercentage1 + "',";
            if (lspercentage2 == "" || lspercentage2 == null)
            {
                msSQL += "'0.00',";
            }
            else
            {
                msSQL += "'" + lspercentage2 + "',";
            }
            if (lspercentage3 == "" || lspercentage3 == null)
            {
                msSQL += "'0.00',";
            }
            else
            {
                msSQL += "'" + lspercentage3 + "',";
            }
            msSQL += "'" + values.tax_gid + "'," +
               "'" + values.tax_gid2 + "'," +
               "'" + values.tax_gid3 + "'," +
               "'" + values.discount_percentage + "'," +
               "'" + values.discount_amount + "'," +
               "'" + "0.00" + "'," +
               "'" + values.vendor_gid + "'," +
             " '" + DateTime.Now.ToString("yyyy-MM-dd") + "', " +
            "'" + values.product_requireddateremarks + "', " +
             " '" + values.product_code + "')";


            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = true;
                values.message = "Product Added Successfully";
            }

            else
            {
                values.status = false;
                values.message = "Error While Adding Product";
            }

        }
        public void DaGetTempProductsSummary(string employee_gid, MdlPmrTrnPurchaseQuotation values)
        {
            double total_amount = 0.00;
            double ltotalamount = 0.00;

            msSQL = " Select quotationdtl_gid,quotation_gid,product_gid,productgroup_gid,productgroup_name ,product_code ," +
               " product_name,FORMAT(product_price,2)AS product_price ,qty_quoted,format(discount_percentage,2)as discount_percentage ," +
               " format(discount_amount,2)as discount_amount ,format(tax_percentage,2)as tax_percentage ,format(tax_amount,2)as tax_amount ," +
               " product_remarks,vendor_gid,uom_gid,uom_name,payment_days,delivery_period,format(price,2)as price,display_field," +
               " product_status,tax_name,tax_name2,tax_name3,format(tax_percentage2,2)as tax_percentage2 ,format(tax_percentage3,2)as tax_percentage3 ," +
               " format(tax_amount2,2)as tax_amount2 ,format(tax_amount3,2) as tax_amount3 ,salesorder_refno,salesorder_status,salesorder_flag " +
               " from pmr_tmp_tquotationdtl   " +
               " where employee_gid='" + employee_gid + "'";


            dt_datatable = objdbconn.GetDataTable(msSQL);
            var getModuleList = new List<tempsummary_list>();
            if (dt_datatable.Rows.Count != 0)
            {
                foreach (DataRow dt in dt_datatable.Rows)
                {
                    total_amount += double.Parse(dt["price"].ToString());
                    ltotalamount += double.Parse(dt["price"].ToString());
                    getModuleList.Add(new tempsummary_list
                    {
                        quotationdtl_gid = dt["quotationdtl_gid"].ToString(),
                        quotation_gid = dt["quotation_gid"].ToString(),
                        //customerproduct_code = dt["customerproduct_code"].ToString(),
                        qty_quoted = dt["qty_quoted"].ToString(),
                        //product_requireddate = dt["product_requireddate"].ToString(),
                        productgroup_name = dt["productgroup_name"].ToString(),
                        product_code = dt["product_code"].ToString(),
                        product_name = dt["product_name"].ToString(),
                        uom_name = dt["uom_name"].ToString(),
                        //selling_price = dt["selling_price"].ToString(),
                        product_gid = dt["product_gid"].ToString(),
                        //tax_gid = dt["tax1_gid"].ToString(),
                        //tax2_gid = dt["tax2_gid"].ToString(),
                        //tax3_gid = dt["tax3_gid"].ToString(),
                        tax_name = dt["tax_name"].ToString(),
                        tax_name2 = dt["tax_name2"].ToString(),
                        tax_name3 = dt["tax_name3"].ToString(),
                        tax_amount = dt["tax_amount"].ToString(),
                        tax_amount2 = dt["tax_amount2"].ToString(),
                        tax_amount3 = dt["tax_amount3"].ToString(),
                        //product_requireddateremarks = dt["productrequireddate_remarks"].ToString(),
                        //slno = dt["slno"].ToString(),
                        discount_percentage = dt["discount_percentage"].ToString(),
                        discount_amount = dt["discount_amount"].ToString(),
                        product_price = dt["product_price"].ToString(),
                        price = dt["price"].ToString()


                    });
                    values.prodsummary_list = getModuleList;
                }
            }
            dt_datatable.Dispose();
            values.total_amount = total_amount;
            values.ltotalamount = ltotalamount;
        }


        //Overalsubmit

        public void DaPostDirectQuotation(string employee_gid, post_list values)
        {

            msGetGid = objcmnfunctions.GetMasterGID("PQNP");
            if (msGetGid == "E")
            {
                values.status = true;
                values.message = "Cannot able to generate Unique ID";
            }


            msSQL = " insert  into pmr_trn_tquotation (" +
           " quotation_gid ," +
           " branch_gid ," +
           " quotation_date," +
           " vendor_gid," +
           " contactperson_name," +
           " vendor_address," +
           " email_id," +
           " contact_telephonenumber, " +
           " created_by," +
           " quotation_referencenumber," +
           " quotation_remarks," +
           " quotation_referenceno1, " +
           " payment_days, " +
           " delivery_days, " +
           " total_amount, " +
           " termsandconditions, " +
           " quotation_status, " +
           " addon_charge, " +
           " additional_discount, " +
           " grandtotal_l, " +
           " currency_code, " +
           " currency_gid, " +
           " exchange_rate, " +
           " shipping_to, " +
           " qo_type " +
           ")values(" +

           " '" + msGetGid + "'," +
            " '" + values.branch_gid + "'," +
            " '" + DateTime.Now.ToString("yyyy-MM-dd") + "'," +
            " '" + lsvendor_gid + "'," +
            " '" + values.contactperson_name + "'," +
            " '" + values.vendor_address + "'," +
            " '" + values.email_id + "'," +
            " '" + values.contact_telephonenumber + "'," +
            " '" + employee_gid + "'," +
            " '" + values.quotation_referencenumber + "'," +
            " '" + values.quotation_remarks + "'," +
            " '" + values.quotation_referenceno1 + "'," +
            " '" + values.payment_days + "'," +
            " '" + values.delivery_days + "'," +
            " '" + values.producttotalamount + "'," +
            " '" + values.termsandconditions + "'," +
            " 'Approved'," +
            " '" + values.addon_charge + "'," +
            " '" + values.additional_discount + "'," +
            " '" + values.grandtotal + "'," +
            " '" + values.currency_code + "'," +
            " '" + values.currency_gid + "'," +
            " '" + values.exchange_rate + "'," +
            " '" + values.shipping_to + "'," +
            " 'Services')";
            mnResult = objdbconn.ExecuteNonQuerySQL(msSQL);
            if (mnResult != 0)
            {
                values.status = false;
                values.message = "Error occurred while Insertion";
            }

            else
            {
                msSQL = " select " +
                " quotationdtl_gid," +
                " quotation_gid," +
                " product_gid," +
                " productgroup_gid," +
                " productgroup_name," +
                " product_code," +
                " product_name," +
                " display_field, " +
                " product_price," +
                " qty_quoted," +
                " discount_percentage," +
                " discount_amount," +
                " uom_gid," +
                " uom_name," +
                " price," +
                " tax_name," +
                " tax_name2," +
                " tax_name3," +
                " tax1_gid, " +
                " tax2_gid, " +
                " tax3_gid, " +
                " tax_amount," +
                " tax_amount2," +
                " tax_amount3 from pmr_tmp_tquotationdtl" +
                " where employee_gid='" + employee_gid + "' and" +
                " order_type='Services'";


                dt_datatable = objdbconn.GetDataTable(msSQL);
                var getModuleList = new List<post_list>();
                if (dt_datatable.Rows.Count != 0)
                {
                    foreach (DataRow dt in dt_datatable.Rows)
                    {

                        values.quotationdtl_gid = dt["quotationdtl_gid"].ToString();
                        values.quotation_gid = dt["quotation_gid"].ToString();
                        values.product_gid = dt["product_gid"].ToString();
                        values.productgroup_gid = dt["productgroup_gid"].ToString();
                        values.customerproduct_code = dt["customerproduct_code"].ToString();
                        values.product_name = dt["product_name"].ToString();
                        values.product_price = dt["product_price"].ToString();
                        values.qty_quoted = dt["qty_quoted"].ToString();
                        values.discount_percentage = dt["discount_percentage"].ToString();
                        values.discount_amount = dt["discount_amount"].ToString();
                        values.uom_gid = dt["uom_gid"].ToString();
                        values.uom_name = dt["uom_name"].ToString();
                        values.price = dt["price"].ToString();
                        values.tax_name = dt["tax_name"].ToString();
                        values.tax_name2 = dt["tax_name2"].ToString();
                        values.tax_name3 = dt["tax_name3"].ToString();
                        values.slno = dt["slno"].ToString();
                        values.tax_amount = dt["tax_amount"].ToString();
                        values.tax2_gid = dt["tax2_gid"].ToString();
                        values.tax3_gid = dt["tax2_gid"].ToString();
                        values.tax_amount = dt["tax_amount"].ToString();
                        values.tax_amount2 = dt["tax_amount2"].ToString();
                        values.tax_amount3 = dt["tax_amount3"].ToString();


                    }

                    msGetGid1 = objcmnfunctions.GetMasterGID("PQDC");
                    if (msGetGid1 == "E")
                    {
                        values.status = true;
                        values.message = "Error";
                    }
                    else
                    {
                        mssalesorderGID1 = objcmnfunctions.GetMasterGID("PQDC");
                        msSQL = " insert into pmr_trn_tquotationdtl (" +
                        " quotationdtl_gid ," +
                        " quotation_gid," +
                        " product_gid ," +
                        " productgroup_gid," +
                        " productgroup_name," +
                        " product_code," +
                        " product_name," +
                        " display_field," +
                        " product_price," +
                        " qty_quoted," +
                        " discount_percentage," +
                        " discount_amount," +
                        " tax_amount ," +
                        " uom_gid," +
                        " uom_name," +
                        " price," +
                        " tax_name," +
                        " tax_name2," +
                        " tax_name3," +
                        " tax1_gid," +
                        " tax2_gid," +
                        " tax3_gid," +
                        " tax_amount2," +
                        " tax_amount3," +
                        " tax_amount_l ," +
                        " tax_amount2_l," +
                        " tax_amount3_l," +
                        " discount_amount_l, " +
                        "product_price_l, " +
                        " price_l, " +
                        " quotation_referenceno1" +
                        ")values(" +
                        " '" + mssalesorderGID1 + "'," +
                        " '" + mssalesorderGID + "'," +
                        " '" + lsproductname_gid + "'," +
                        " '" + lsproductgroup_gid + "'," +
                        " '" + values.productgroup + "'," +
                        " '" + values.productcode + "'," +
                        " '" + values.productname + "'," +
                        " '" + values.display_field + "'," +
                        " '" + values.unitprice + "'," +
                        " '" + values.quantity + "'," +
                        " '" + values.discountpercentage + "'," +
                        " '" + values.discountamount + "'," +
                        " '" + values.taxamount_1 + "'," +
                        " '" + values.uom_gid + "'," +
                        " '" + values.uom_name + "'," +
                        " '" + values.totalamount + "'," +
                        " '" + values.tax_name1 + "'," +
                        " '" + values.tax_name2 + "'," +
                        " '" + values.tax_name3 + "'," +
                        " '" + values.tax1_gid + "'," +
                        " '" + values.tax2_gid + "'," +
                         " '" + values.tax3_gid + "'," +
                        " '" + values.taxamount_2 + "'," +
                        " '" + values.taxamount_3 + "'," +
                         " '" + values.tax_amount + "'," +
                        " '" + values.taxamount_2 + "'," +
                        " '" + values.taxamount_3 + "'," +
                        " '" + values.quotation_referenceno1 + "')";
                    }
                }


            }
        }


            
        
    }
}

import { Component } from '@angular/core';
import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { AES, enc } from 'crypto-js';
import { SelectionModel } from '@angular/cdk/collections';
import { ToastrService } from 'ngx-toastr';
import { SocketService } from 'src/app/ems.utilities/services/socket.service';
import { NgxSpinnerService } from 'ngx-spinner';

interface IMakePaymentReport {
  bank_name: string;
  payment_date: string;
  payment_mode: string;
  branch_name: string;
  acct_number: string;
  user_code:string;
  employee_name:string;
  department_name:string;
  outstanding_amount:string;
  earned_net_salary:string;
}
@Component({
  selector: 'app-pay-trn-makepayment',
  templateUrl: './pay-trn-makepayment.component.html',
  styleUrls: ['./pay-trn-makepayment.component.scss']
})
export class PayTrnMakepaymentComponent {
  showInput: boolean = false;
  showInput1: boolean = false;

  reactiveForm!: FormGroup;
  selection = new SelectionModel<IMakePaymentReport>(true, []);
  MakePaymentReport!: IMakePaymentReport;
  // paymentmodelist: any[] = [];
  employeebanklist: any[] = [];
  responsedata: any;
  makepayment_list: any[] = [];
  makepayment_list1: any[] = [];
  paymentadd_list: any[] = [];
  monthyear:any;
  month:any;
  year:any;
  user_gid: any;
  
  
  constructor(private formBuilder: FormBuilder, 
     private route: ActivatedRoute,
     private router: Router,
     private ToastrService: ToastrService,
     public service: SocketService,
     public NgxSpinnerService:NgxSpinnerService,) {
    this.MakePaymentReport = {} as IMakePaymentReport;
    }

    ngOnInit(): void {
      debugger;
      const monthyear = this.route.snapshot.paramMap.get('monthyear');
    this.monthyear = monthyear;
    const secretKey = 'storyboarderp';
    const deencryptedParam = AES.decrypt(this.monthyear, secretKey).toString(enc.Utf8);
    console.log(deencryptedParam);
    const [month, year,user_gid] = deencryptedParam.split('+');
    this.month = month;
    this.year = year;
    this.user_gid = user_gid;
    this.onpayment(month, year, user_gid,);
    this.reactiveForm = new FormGroup({
     

            bank_name : new FormControl(this.MakePaymentReport.bank_name, [
            Validators.required,
            Validators.minLength(1),
            ]),
            modeofpayment_gid: new FormControl(''),

            payment_date : new FormControl(this.MakePaymentReport.payment_date, [
              Validators.required,
              Validators.minLength(1),
              ]),
              
              payment_mode : new FormControl(this.MakePaymentReport.payment_mode, [
                Validators.required,
                Validators.minLength(1),
                ]),
                branch_name: new FormControl(''),
                acct_number: new FormControl(''),
                cheq_number: new FormControl(''),
                monthpayment: new FormControl(''),
                earned_net_salary: new FormControl(''),
                makepayment_list: this.formBuilder.array([]),

        });
       
      //   var api='PayTrnSalaryPayment/GetPaymentModeDtl'
      //   this.service.get(api).subscribe((result:any)=>{
      //   this.paymentmodelist = result.getpaymentmodedtl;
      //   //console.log(this.paymentmodelist)
      //  });

       var api='PayTrnSalaryPayment/GetEmployeeBankDtl'
        this.service.get(api).subscribe((result:any)=>{
        this.employeebanklist = result.getemployeebankdtl;
        //console.log(this.employeebanklist)
       });

    }

  onpayment(month: any,year:any,user_gid: any) {
  var url = 'PayTrnSalaryPayment/GetMakePaymentSummary'
  let param = {
    month : month, 
    year : year, 
    user_gid: user_gid
  }
  this.NgxSpinnerService.show();
  this.service.getparams(url, param).subscribe((result: any) => {
  this.NgxSpinnerService.hide();
  this.makepayment_list = result.makepaymentlist;
  for(let i=0;i<this.makepayment_list.length;i++){
    this.reactiveForm.addControl(`earned_net_salary_${i}`, new FormControl(this.makepayment_list[i].earned_net_salary));
  }
  $('#makepayment_list').DataTable();
    });
}

  showTextBox(event: Event) {
    const target = event.target as HTMLInputElement;
    this.showInput = target.value === 'Cheque';
    this.showInput1 = target.value === 'NEFT';
   
   }

   isAllSelected() {
    const numSelected = this.selection.selected.length;
    const numRows = this.makepayment_list.length;
    return numSelected === numRows;
  }
  masterToggle() {
    this.isAllSelected() ?
      this.selection.clear() :
      this.makepayment_list.forEach((row: IMakePaymentReport) => this.selection.select(row));
      
  }
  
  // Validation
 
  get bank_name() {
    return this.reactiveForm.get('bank_name')!;
  }
 
  get payment_date() {
    return this.reactiveForm.get('payment_date')!;
  }

   get payment_mode() {
    return this.reactiveForm.get('payment_mode')!;
  }
  get branch_name() {
    return this.reactiveForm.get('branch_name')!;
  }
  get acct_number() {
    return this.reactiveForm.get('acct_number')!;
  }

  submit() {
    debugger;
    const selectedData = this.selection.selected; 
    if (selectedData.length === 0) {
      this.ToastrService.warning("Select Atleast one Employee to payrun");
      return;
    } 
    for (const data of selectedData) {
      this.makepayment_list1.push(data);
    } 
   var params={ 
       month: this.month, 
       year: this.year,
       payment_type: this.reactiveForm.value.payment_mode,
       bank_name: this.reactiveForm.value.bank_name,
       cheque_bank: this.reactiveForm.value.bank_name,
       bank_branch: this.reactiveForm.value.branch_name,
       account_no: this.reactiveForm.value.acct_number,
       cheque_number: this.reactiveForm.value.cheq_number,
       payment_list:this.makepayment_list1 
    }
    console.log(params)
    var url = 'PayTrnSalaryPayment/PostMakePayment'; 
      this.service.postparams(url,params).subscribe((result: any) => {
        if (result.status == false) {
          this.ToastrService.warning(result.message)
       }
       else{
        this.ToastrService.success(result.message)
        this.router.navigate(['/payroll/PayTrnPaymentsummary'])  
       }
      });
  }

 onback(){
  this.router.navigate(['/payroll/PayTrnPaymentsummary']) 
  }
}